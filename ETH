import time
from datetime import datetime, timezone
from web3 import Web3

# Configuration
RPC_URL = "https://eth-goerli.alchemyapi.io/v2/YOUR_API_KEY"
CONTRACT_ADDRESS = "0xYourContractAddress"
PRIVATE_KEY = "your_private_key"
WALLET_ADDRESS = "0xYourWalletAddress"
MINT_START_TIME = datetime(2025, 1, 20, 14, 0, tzinfo=timezone.utc)
MAX_RETRIES = 3

web3 = Web3(Web3.HTTPProvider(RPC_URL))

with open("contract_abi.json", "r") as abi_file:
    contract_abi = abi_file.read()

contract = web3.eth.contract(address=Web3.to_checksum_address(CONTRACT_ADDRESS), abi=contract_abi)

def wait_for_mint_start():
    now = datetime.now(timezone.utc)
    if now < MINT_START_TIME:
        print(f"Waiting for mint to start at {MINT_START_TIME}...")
        while now < MINT_START_TIME:
            time.sleep(1)
            now = datetime.now(timezone.utc)
        print("Minting time has started!")

def mint_nft():
    nonce = web3.eth.get_transaction_count(WALLET_ADDRESS)
    mint_function = contract.functions.mint(1)
    gas_price = web3.eth.gas_price
    gas_limit = mint_function.estimate_gas({"from": WALLET_ADDRESS, "value": web3.to_wei(0.05, "ether")})

    transaction = mint_function.build_transaction({
        "from": WALLET_ADDRESS,
        "value": web3.to_wei(0.05, "ether"),
        "gas": gas_limit,
        "gasPrice": gas_price,
        "nonce": nonce
    })

    signed_txn = web3.eth.account.sign_transaction(transaction, private_key=PRIVATE_KEY)
    txn_hash = web3.eth.send_raw_transaction(signed_txn.rawTransaction)
    print(f"Transaction sent! Hash: {web3.to_hex(txn_hash)}")
    receipt = web3.eth.wait_for_transaction_receipt(txn_hash)
    print("Transaction successful!", receipt)

def mint_nft_with_retries():
    retries = 0
    while retries < MAX_RETRIES:
        try:
            mint_nft()
            break
        except Exception as e:
            print(f"Mint failed: {e}. Retrying... ({retries + 1}/{MAX_RETRIES})")
            retries += 1
            time.sleep(5)
    if retries == MAX_RETRIES:
        print("Max retries reached. Minting failed.")

if __name__ == "__main__":
    wait_for_mint_start()
